snippet pry
	binding.pry
snippet cls
	class ${1:ClassName}
		${2}
	end
snippet mdl
	module ${1:ModuleName}
		${2}
	end
snippet inc
	include ${1:ModuleName}
snippet ext
	extend ${1:ModuleName}
snippet ise
	it { is_expected.to ${1:be} }
snippet hso
	has_one :${1:model}
snippet hsm
	has_many :${1:model}
snippet hsbm
	has_and_belongs_to_many :${1:model}
snippet blt
	belongs_to :${1:model}
snippet ech
	${1:object}s.each do |${1:object}|
		${2}
	end
snippet def
	def ${1:method_name}
	end
snippet defp
	def ${1:method_name}(${2:param})
	end
snippet ps
	puts ${1}
snippet pid
	params[:id]
snippet strpr
	params.require(:${1:object}).permit(${2})
snippet rd
	render :${1}
snippet rdt
	redirect_to ${1}
snippet rdtp
	redirect_to ${1}_path
snippet prv
	private
snippet fsl
	# frozen_string_literal: true
snippet init
	def initialize
		${1}
	end
snippet initp
	def initialize(${1})
		${2}
	end
snippet letc
	let(:${1:object}) { create(${2:object}) }
snippet letb
	let(:${1:object}) { build(${2:object}) }
snippet atf
	let(:${1:object}) { attributes_for(${2:object}) }
snippet letc!
	let!(:${1:object}) { create(${2:object}) }
snippet letb!
	let!(:${1:object}) { build(${2:object}) }
snippet atf!
	let!(:${1:object}) { attributes_for(${2:object}) }
snippet bf
	before { ${1} }
snippet dsc
	describe '${1}' do
		${2}
	end
snippet cnx
	context '${1}' do
		${2}
	end
snippet sbj
	subject { ${1} }
snippet anio
	allow_any_instance_of(${1}).to receive(:${2}).and_return(${3})
snippet alw
	allow(${1}).to receive(${2}).and_return(${3})
snippet ibl
	it_behaves_like '${1}'
snippet dse
	RSpec.shared_examples '${1}' do
		${2}
	end
snippet rrh
	require 'rails_helper'
snippet fgd
	FactoryGirl.define do
		factory :${1} do
			${2}
		end
	end
snippet fct
	factory :${1} do
		${2}
	end
snippet fctp
	factory_girl :${1}, parent: ${2} do
		${3}
	end
snippet ft
	${1:key}: '${2}',
snippet gm
	gem '${1}'
snippet exasc
	extend ActiveSupport::Concern
snippet if
	if ${1:condition}
	end
snippet ifel
	if ${1:condition}
	else
	end
snippet cid
	params[:${1}_id]
snippet depd
	dependent: :destroy
snippet depda
	dependent :delete_all
